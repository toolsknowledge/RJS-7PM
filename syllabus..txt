1) Introduction to ReactJS

    => what is ReactJS

    => Angular / React / NodeJS / VueJS    (Pending)

    => Virtual DOM


2) Installation of ReactJS       


3) Components in ReactJS

    => Functional Components / Stateless Components   

    => Class Components / Stateful Components    


4) Components Communications

    => Parent to Child Communications

    => Child to Parent Communications


5) Events in Components

    => click

    => double click

    => change

    => key events


6) Asynchronous Calls

        => axios

        => fetch


7) Spring Boot Integration


8) MERN Stack Development

    M - MongoDB

    E - ExpressJS

    R - ReactJS

    N - NodeJS

9) Hooks

    useState()

    useEffect()

    useCallBack()

    useRef()

    useContext()

    useSuspense()

    ---
    ---
    ---
    ---

10) Forms with Validations

        => formik

        => yup



11) Middlewares in ReactJS

        => Redux

        => Thunk

        => Saga


12) Project


13) Cloud Deployment

    => AWS Deployment

        CI / CD Process

    => Heroku Deployment


14) Single Page Applications

    => Routing

    => Routing Parameters

    => Protected Routes


15) Unit Test Cases


16) Token Based Authentication System

        JSON WEB TOKEN


17) Material UI


18) Debugging


19) WebPack


                                                    Introduction to ReactJS 
                                                    ************************
    => ReactJS is the JavaScript library.

    => ReactJS given by Facebook.

    => Current Version of ReactJS is 18.x

    => React Categorized into 2 flavours.

            1) ReactJS

            2) React Native

    => ReactJS used to develop the web Applications.

    => React Native used to implement the Hybrid Mobile Applications.

    => Visual Studio Code is the Suggestable IDE to Build ReactJS Applications.

    => VSCode Given by Microsoft and open source IDE.

    => npm is the tool, helps to install the ReactJS.

    => npm stands for node packaging manager.

    => npm present in NodeJS.

    => "create-react-app" is the tool, used to create the react applications.

    => we will develop ReactJS Applications in two ways.

            1) JSX

            2) TSX

    => JSX Stands for JavaScript and XML.

    => we will save JSX Files in two ways.

            1) .js extension

            2) .jsx extension

    => JavaScript is the Object Based Scripting Language.

    => JavaScript won't Support OOPS.

    => TSX Stands for TypeScript and XML.

    => TypeScript Supports OOPS.

    => tsc is the tool, used to convert the TypeScript to equalent JavaScript.

    => Babel is the tool, used to convert the XML to equalent JavaScript.

    => we will save TypeScript files in two ways.

            1) .ts extension

            2) .tsx extension



Software Installation
=====================

1) download and install "NodeJS"

        => npm

        => npx

        => node

        ---
        ---
        ---

        npm stands for "node packaging manager"

        npm used to "install" the ReactJS.

        npx stands for "node packaging runner".

        npx creates the environment to create the "react application".

        node tool, helps to execute the "JavaScript".


    website : https://nodejs.org/en/

    file    : node-v16.6.1-x64.msi




2) install "create-react-app" tool

    - "create-react-app" tool provided by "Facebook".

    - "create-react-app" tool, used to create the react applications.

    - we will install "create-react-app" tool by using "npm" tool


    > npm install -g create-react-app

    "-g" stands for global Installation.




3) install Visual Studio Code


website : https://code.visualstudio.com/docs/?dv=win

file    : VSCodeUserSetup-x64-1.58.2.exe



4) install yarn tool.

    yarn tool given by Facebook

    yarn tool, used to download the 3rd party libraries.

    we will install yarn tool by using following command

    > npm install -g yarn



create the react application
****************************
1) create the react application by using following command

        > npx create-react-app first-app    (JSX)


        > npx create-react-app first-app --template typescript   (TSX)

    
2) switch to react application

    > cd first-app


3) execute the react application

    > yarn start

    The default port number of react application is "3000"





DOM -  Document Object Model









Directory Structure
*******************
1) node_modules

        - node_modules containes libraries

        - these libraries helps to execute the react application


2) public/favicon.ico

    - this is the default logo of react.


3) public / index.html

    - react starts the execution from "index.html" file.

    - "index.html" file called as main template.

    - "index.html" file containes "div" whose id is "root"

    - "index.js" file bind the component data to "div".

4) public / logo192.png
            logo512.png
    
        - these logos are default logos provided by react library

        - these logos helps to execute react application in different resolutions


5) public / manifest.json

    - helps to implement the mobile application develop


6) public / robots.txt

    - helps to define the SEO Keywords.

    - SEO Stands for Search Engine Optimization


state
*****
    component data called as state.

    useState() is life cycle hook, used to define the state in functional component.




Login Application
*****************

1) create the table in MongoDB

    => MongoDB Database is NoSQL Database.

    => MongoDB Database supports JSON.

    => MongoDB Database is light weight Database.

    => MongoDB Database Supports Cloud environment in the form of MongoDB Atlas.


                SQL                             NoSQL
******************************************************************************************

Ex.
        Oracle                                  MongoDB

        MySQL                                   CassandraDB

        SQLServer                               RabbitMQ


        tables                                  collections

        databases                               databases

        rows                                    documents

        primary key                             _id
*******************************************************************************************

Database name   :   login

collection name :   login_tbl

connection url  : mongodb+srv://admin:admin@miniprojectdb.nzphu.mongodb.net/login?retryWrites=true&w=majority


2) create the node server

        => nodejs is the "backend" technology.

        => nodejs used to develop the "servers".

        => we will develop nodejs applications with the help of "JavaScript".

        => nodejs supports libraries/modules.

        => these libraries we can download either "npm" tool or "yarn" tool.

libraries
*********

1) express

        - express library used to develop the rest api's

        GET

        POST

        PUT

        DELETE

        PATCH

        ---
        ---
        ---

2) mongodb

        - "mongodb" library helps to connct to "mongodb Database".


3) body-parser

    - used to receive the data from client application.


4) cors

    - used to enable the Communications between ports.

    - enable the cors policy


=> create the folder

    Ex.
        server


=> switch to server folder

    > cd server


=> download the libraries

    > yarn express mongodb body-parser cors


=> create the node server

    server.js


=> start the node server

    > node server


=> test the rest api by using "Postman"

    http://localhost:8080/login



create the frontend application
*******************************
=> create the react application

    > npx create-react-app login-app


=> switch to react application

    > cd login-app


=> download axios module

    - axios module used to connect to server

    > yarn add axios --save


=> create the Login Component


Deployment of NodeJS to AWS Server
**********************************

1) push nodejs code to GitHub


2) create the application in aws server


3) implement the CI / CD Process



Frontend Deployment
*******************

1) configure the cloud url

    => http://Reactjs7pmserver-env.eba-t3tjxmnm.ap-south-1.elasticbeanstalk.com/login

2) download aws cli tool

    website : https://aws.amazon.com/cli/

    file    : AWSCLIV2.msi


3) prepare the production build

    > npm run build

4) push build file to aws s3 bucket

        URL : http://mernappl.s3-website.ap-south-1.amazonaws.com

        => static website hosting

            Ex.
                index.html

        => bucket policy

            {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::mernappl/*"
            }
        ]
    }

5) create the user credentials

        IAM


6) edit the package.json file

    scripts:{

        "deploy": "aws s3 cp --recursive ./build s3://mernappex"
    }

7) execute the following commands

    > aws configure

    > npm run build

    > npm run deploy


Spring Boot Integration
***********************

1) install jdk

    website : https://download.oracle.com/java/17/latest/jdk-17_windows-x64_bin.exe 


2) execute the Spring Boot project

    Name : Mini-Project-0.0.1-SNAPSHOT.jar

    > java -jar Mini-Project-0.0.1-SNAPSHOT.jar


3) test the following rest api with Postman/Browser

    > http://localhost:5000/api/v1/products


4) create the Component

    App.js































